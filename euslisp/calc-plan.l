(load "/userdir/gnuplotlib.l")
(setq *motion-choice* "forehand-volley-step")
;; (setq *motion-choice* "backhand-volley-step")

(setq *is-choreonoid* t)
(require "package://tennis/euslisp/is-choreonoid") ;; *is-choreonoid* is defined
(require "package://tennis/euslisp/experiment_utils.l")
(require "package://tennis/euslisp/global-variables.l")

(setq *id-max* 14)
(setq *recursive-order* 5)
(nlopt-init :x-max 2.0 :x-hit 1.4 :id-max *id-max* :recursive-order *recursive-order* :use-all-joint t :use-append-root-joint t :interval-num 20 :support-polygon-margin (list 40.0 40.0 0 40 40) :epsilon-c 30 :mu 0.3 :use-final-pose nil :default-switching-list nil :use-6dof-p t)
(validate-p-orig-and-bspline-dim)
(send *robot* :move-to (make-coords) :world)
(let* ((t-max *x-max-of-p-orig*) (step 0.05)(seq-num (round (+ 1 (/ t-max step)))))
    (setq *exp-jpos-deg1* (make-list seq-num))
    (setq *exp-tm-ms1* (make-list seq-num))
    (setq *exp-rc1* (make-list seq-num))
    (setq *exp-zmp-wc1* (make-list seq-num))
    (setq *exp-optional1* (make-list seq-num))
    (setq *exp-jpos-rad1* (make-list seq-num))
    (setq *exp-tm-s1* (make-list seq-num))
    (setq *exp-pos1* (make-list seq-num))
    (setq *exp-rpy1* (make-list seq-num))
    (setq *exp-zmp-rc1* (make-list seq-num))
    (setq *exp-wc1* (make-list seq-num))
    (setq *exp-cog-wc1* (make-list seq-num))
    (make-sequence-in-advance *exp-jpos-deg1* *exp-tm-ms1* *exp-rc1* *exp-zmp-wc1* *exp-optional1* *exp-jpos-rad1* *exp-tm-s1* *exp-pos1* *exp-rpy1* *exp-zmp-rc1* *exp-wc1* *exp-cog-wc1*
                              :step step :x-max t-max :choreonoid *is-choreonoid* :p *p* :lfoot-ik t :rfoot-ik t))
(format t "[Warn] exp zmp is overwritten~%")
(dotimes (i (length *exp-zmp-wc1*))
  (setf (nth i *exp-zmp-wc1*) (send *rfoot* :worldpos))
  )

(setq *joint-indices-rarm* (list 17 18 19 20 21 22 23 24))
(setq *joint-names-rarm* (list "collar-y" "shoulder-p" "shoulder-r" "shoulder-y" "elbow-p" "wrist-y" "wrist-r" "wrist-p"))
(setq *joint-indices-rleg* (list 0 1 2 3 4 5))
(setq *joint-names-rleg* (list "rleg-crotch-y" "rleg-crotch-r" "rleg-crotch-p" "rleg-knee-p" "rleg-ankle-p" "rleg-ankle-r"))
(setq *joint-indices-lleg* (list 0 1 2 3 4 5))
(setq *joint-names-lleg* (list "lleg-crotch-y" "lleg-crotch-r" "lleg-crotch-p" "lleg-knee-p" "lleg-ankle-p" "lleg-ankle-r"))
(setq *joint-indices-chest* (list 12 13 14))
(setq *joint-names-chest* (list "torso-waist-r" "torso-waist-p" "torso-waist-y"))

; (setq *joint-indices* (flatten *joint-indices-rarm* *joint-indices-chest*))
; (setq *joint-names* (flatten *joint-names-rarm* *joint-names-chest*))
(setq *joint-indices* (flatten *joint-indices-rleg* *joint-indices-lleg*))
(setq *joint-names* (flatten *joint-names-rleg* *joint-names-lleg*))


(setq *gp* (gnuplot))

(setq *bspline-av-list-reordered* nil)
(setq *bspline-hp-list-reordered* nil)
(setq *bspline-hp-vel-norm-list-reordered* nil)
(setq *bspline-rc-list-reordered* nil)
(setq *bspline-tau-list-reordered* nil)
(setq *bspline-jvv-list-reordered* nil)
;; ﾁｮｯﾄｹｲｻﾝﾘｮｳｵｵｲ
;; (dotimes (id (length (car *bspline-av-list*)))
(dolist (id *joint-indices*)
  (let ((jangle-list nil))
    (dolist (av *bspline-av-list*)
      (push (elt av id) jangle-list))
    (nreverse jangle-list)
    (push jangle-list *bspline-av-list-reordered*)))
(nreverse *bspline-av-list-reordered*)
(dotimes (id 6)
  (let ((rootcoords-list nil))
    (dolist (rc *bspline-rc-list*)
      (push (elt (concatenate cons (send rc :worldpos) (car (rpy-angle (send rc :worldrot)))) id) rootcoords-list))
    (nreverse rootcoords-list)
    (push rootcoords-list *bspline-rc-list-reordered*)))
(nreverse *bspline-rc-list-reordered*)
(dotimes (id 3)
  (let ((hp-list nil))
    (dolist (hp *bspline-hp-list*)
      (push (elt (send hp :worldpos) id) hp-list)
      )
    (nreverse hp-list)
    (push hp-list *bspline-hp-list-reordered*)
    ))
(dotimes (id 1)
  (let ((hp-vel-list nil)
        (hp-prev nil))
    (dolist (hp *bspline-hp-list*)
      (when (not hp-prev) (setq hp-prev (send hp :worldpos)))
      (push (norm (scale (/ 1.0 0.05) (v- (send hp :worldpos) hp-prev))) hp-vel-list)
      (setq hp-prev (send hp :worldpos))
      )
    (push hp-vel-list *bspline-hp-vel-norm-list-reordered*)
    ))
(nreverse *bspline-hp-list-reordered*)
(nreverse *bspline-hp-vel-norm-list-reordered*)


(dolist (id *joint-indices*)
  (let ((torque-list nil))
    (dolist (tq *bspline-tau-list*)
      (push (elt tq id) torque-list))
   (nreverse torque-list)
    (push torque-list *bspline-tau-list-reordered*)))
(nreverse *bspline-tau-list-reordered*)

(dolist (id *joint-indices*)
  (let ((jvv-list nil))
    (dolist (jvv *bspline-jvv-list*)
      (push (elt jvv id) jvv-list))
   (nreverse jvv-list)
    (push jvv-list *bspline-jvv-list-reordered*)))
(nreverse *bspline-jvv-list-reordered*)

(graph-view (list (mapcar #'(lambda (i) (elt i 1)) *exp-zmp-wc1*)) (mapcar #'(lambda (i) (elt i 0)) *exp-zmp-wc1*) :title "zmp" :keylist (list "x" "y") :dump-graph t)
(graph-view *bspline-av-list-reordered* *bspline-tm-list* :title "angle-vector" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-hp-list-reordered* *bspline-tm-list* :title "hit-point" :dump-graph t)
(graph-view *bspline-hp-vel-norm-list-reordered* *bspline-tm-list* :title "hit-point-vel-norm" :dump-graph t)
(graph-view *bspline-rc-list-reordered* *bspline-tm-list* :title "root coords" :dump-graph t)
(graph-view *bspline-tau-list-reordered* *bspline-tm-list* :title "tau" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-jvv-list-reordered* *bspline-tm-list* :title "angular-vel-vector" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-jvv-list-reordered* *bspline-tm-list* :title "angular-vel-vector" :keylist *joint-names*)

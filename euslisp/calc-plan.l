(load "nlopt_bspline_optimization.l")
(load "/home/future731/prog/euslib/jsk/gnuplotlib.l")
(send *robot* :move-to (make-coords) :world)
(with-append-root-joint
  (link-list-with-robot-6dof *robot* (list (cdr (send *robot* :links)))
                             :joint-class 6dof-joint)
  (show-optimized-motion *p* :cnt 1000 :x-max *x-max-of-p-orig* :real-time nil :lfoot-ik nil :rfoot-ik nil))

(setq *joint-indices-rarm* (list 17 18 19 20 21 22 23 24))
(setq *joint-names-rarm* (list "collar-y" "shoulder-p" "shoulder-r" "shoulder-y" "elbow-p" "wrist-y" "wrist-r" "wrist-p"))
(setq *joint-indices-chest* (list 12 13 14))
(setq *joint-names-chest* (list "torso-waist-r" "torso-waist-p" "torso-waist-y"))

(setq *joint-indices* (flatten *joint-indices-rarm* *joint-indices-chest*))
(setq *joint-names* (flatten *joint-names-rarm* *joint-names-chest*))


(setq *gp* (gnuplot))

(setq *bspline-av-list-reordered* nil)
(setq *bspline-hp-list-reordered* nil)
(setq *bspline-hp-vel-norm-list-reordered* nil)
(setq *bspline-rc-list-reordered* nil)
(setq *bspline-tau-list-reordered* nil)
(setq *bspline-jvv-list-reordered* nil)
;; ﾁｮｯﾄｹｲｻﾝﾘｮｳｵｵｲ
;; (dotimes (id (length (car *bspline-av-list*)))
(dolist (id *joint-indices*)
  (let ((jangle-list nil))
    (dolist (av *bspline-av-list*)
      (push (elt av id) jangle-list))
    (nreverse jangle-list)
    (push jangle-list *bspline-av-list-reordered*)))
(nreverse *bspline-av-list-reordered*)
(dotimes (id 6)
  (let ((rootcoords-list nil))
    (dolist (rc *bspline-rc-list*)
      (push (elt (concatenate cons (send rc :worldpos) (car (rpy-angle (send rc :worldrot)))) id) rootcoords-list))
    (nreverse rootcoords-list)
    (push rootcoords-list *bspline-rc-list-reordered*)))
(nreverse *bspline-rc-list-reordered*)
(dotimes (id 3)
  (let ((hp-list nil))
    (dolist (hp *bspline-hp-list*)
      (push (elt (send hp :worldpos) id) hp-list)
      )
    (nreverse hp-list)
    (push hp-list *bspline-hp-list-reordered*)
    ))
(dotimes (id 1)
  (let ((hp-vel-list nil)
        (hp-prev nil))
    (dolist (hp *bspline-hp-list*)
      (when (not hp-prev) (setq hp-prev (send hp :worldpos)))
      (push (norm (scale (/ 1.0 0.05) (v- (send hp :worldpos) hp-prev))) hp-vel-list)
      (setq hp-prev (send hp :worldpos))
      )
    (push hp-vel-list *bspline-hp-vel-norm-list-reordered*)
    ))
(nreverse *bspline-hp-list-reordered*)
(nreverse *bspline-hp-vel-norm-list-reordered*)


(dolist (id *joint-indices*)
  (let ((torque-list nil))
    (dolist (tq *bspline-tau-list*)
      (push (elt tq id) torque-list))
   (nreverse torque-list)
    (push torque-list *bspline-tau-list-reordered*)))
(nreverse *bspline-tau-list-reordered*)

(dolist (id *joint-indices*)
  (let ((jvv-list nil))
    (dolist (jvv *bspline-jvv-list*)
      (push (elt jvv id) jvv-list))
   (nreverse jvv-list)
    (push jvv-list *bspline-jvv-list-reordered*)))
(nreverse *bspline-jvv-list-reordered*)

(graph-view *bspline-av-list-reordered* *bspline-tm-list* :title "angle-vector" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-hp-list-reordered* *bspline-tm-list* :title "hit-point" :dump-graph t)
(graph-view *bspline-hp-vel-norm-list-reordered* *bspline-tm-list* :title "hit-point-vel-norm" :dump-graph t)
(graph-view *bspline-rc-list-reordered* *bspline-tm-list* :title "root coords" :dump-graph t)
(graph-view *bspline-tau-list-reordered* *bspline-tm-list* :title "tau" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-jvv-list-reordered* *bspline-tm-list* :title "angular-vel-vector" :keylist *joint-names* :dump-graph t)
(graph-view *bspline-jvv-list-reordered* *bspline-tm-list* :title "angular-vel-vector" :keylist *joint-names*)
